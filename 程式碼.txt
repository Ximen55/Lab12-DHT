CHECK POINT #1
#include "DHT.h"

#define DHTPIN 7    

#define DHTTYPE DHT11   // DHT 11

// Connect pin 1 (on the left) of the sensor to +5V
// NOTE: If using a board with 3.3V logic like an Arduino Due connect pin 1
// to 3.3V instead of 5V!
// Connect pin 2 of the sensor to whatever your DHTPIN is
// Connect pin 4 (on the right) of the sensor to GROUND
// Connect a 10K resistor from pin 2 (data) to pin 1 (power) of the sensor

// Initialize DHT sensor.
// Note that older versions of this library took an optional third parameter to
// tweak the timings for faster processors.  This parameter is no longer needed
// as the current DHT reading algorithm adjusts itself to work on faster procs.
DHT dht(DHTPIN, DHTTYPE);

void setup() {
  Serial.begin(9600);
  Serial.println(F("DHTxx test!"));

  dht.begin();
}

void loop() {
  // Wait a few seconds between measurements.
  delay(2000);

  // Reading temperature or humidity takes about 250 milliseconds!
  // Sensor readings may also be up to 2 seconds 'old' (its a very slow sensor)
  float h = dht.readHumidity();
  // Read temperature as Celsius (the default)
  float t = dht.readTemperature();

  // Check if any reads failed and exit early (to try again).
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(" *C");

}

CHECK POINT #2
#include "Arduino.h"
#include "LTimer.h"
#include "DHT.h"
#define DHTPIN 7
#define DHTTYPE DHT11   // DHT 11
DHT dht(DHTPIN, DHTTYPE);
float h,t;
// instantiation
LTimer timer1(LTIMER_1);

void setup()
{
  Serial.begin(9600);
  // initialization
  timer1.begin();

  dht.begin();
  
  timer1.start(1000, LTIMER_REPEAT_MODE, _callback1, NULL);
}
void loop() { 
 h = dht.readHumidity();
  t = dht.readTemperature();
  }

void _callback1(void *usr_data)
{
  

  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(" *C");
}

CHECK POINT #3
#include "Arduino.h"
#include "LTimer.h"
#include "DHT.h"
#include <LWiFi.h>
#include <WiFiClient.h>
#include "MCS.h"
#define DHTPIN 7
#define DHTTYPE DHT11   // DHT 11

#define _SSID "test1"
#define _KEY  "pigpigpig"
MCSDevice mcs("DdzhSxQU", "zaMTvKPwx6gjT7a1");
MCSDisplayFloat Temperature("Temperature");
MCSDisplayFloat Humidity("Humidity");

DHT dht(DHTPIN, DHTTYPE);
float h, t;
// instantiation
LTimer timer1(LTIMER_1);

void setup()
{
  Serial.begin(9600);
  // initialization
  timer1.begin();

  dht.begin();

  timer1.start(10000, LTIMER_REPEAT_MODE, _callback1, NULL);

  while (WL_CONNECTED != WiFi.status())
  {
    Serial.print("WiFi.begin(");
    Serial.print(_SSID);
    Serial.print(",");
    Serial.print(_KEY);
    Serial.println(")...");
    WiFi.begin(_SSID, _KEY);
  }
  Serial.println("WiFi connected !!");
  mcs.addChannel(Temperature);
  mcs.addChannel(Humidity);
  while (!mcs.connected())
  {
    Serial.println("MCS.connect()...");
    mcs.connect();
  }
  Serial.println("MCS connected !!");
}
void loop() {
  h = dht.readHumidity();
  t = dht.readTemperature();
  mcs.process(100);
  Temperature.set(t);
  Humidity.set(h);
  while (!mcs.connected())
  {
    Serial.println("re-connect to MCS...");
    mcs.connect();
    if (mcs.connected())
      Serial.println("MCS connected !!");
  }
}

void _callback1(void *usr_data)
{
  if (isnan(h) || isnan(t)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
  Serial.println(" *C");
}
